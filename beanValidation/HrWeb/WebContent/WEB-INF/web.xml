<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="richfaces-showcase"
    version="3.0">
    <display-name>showcase</display-name>

  <context-param>
    <param-name>org.apache.myfaces.extensions.validator.CUSTOM_MESSAGE_BUNDLE</param-name>
    <param-value>resources.application</param-value>
  </context-param>

  <!-- setting the project stage to be DEVELOPMENT -->
  <context-param>
    <param-name>javax.faces.PROJECT_STAGE</param-name>   
    <param-value>Development</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.DEFAULT_SUFFIX</param-name>
    <param-value>.jspx</param-value>
  </context-param>

  <!-- Set to true for using the lightweight dialog feature -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.ENABLE_LIGHTWEIGHT_DIALOGS</param-name>
    <param-value>false</param-value>
  </context-param>

  <!-- Temporary internal flag to set to enabled and test Optimized PPR -->
  <context-param>
    <param-name>org.apache.myfaces.trinidadinternal.ENABLE_PPR_OPTIMIZATION</param-name>
    <param-value>false</param-value>
  </context-param>
 
  <!-- In Trinidad, we use an optimized, token-based mechanism if either 
       1] javax.faces.STATE_SAVING_METHOD = server
       2] javax.faces.STATE_SAVING_METHOD = client and 
          org.apache.myfaces.trinidad.CLIENT_STATE_METHOD = token
  -->
  <context-param>
    <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
    <param-value>client</param-value>
    <!--param-value>server</param-value-->
  </context-param>

  <!-- Parameter to set the maximum number of client view state tokens.
       Uncomment this to test low-token-count scenarios.
  <context-param>
    <param-name>org.apache.myfaces.trinidad.CLIENT_STATE_MAX_TOKENS</param-name>
    <param-value>3</param-value>
  </context-param>
  -->

  <!-- Trinidad by default uses an optimized client-side state saving
       mechanism. To disable that, uncomment the following -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.CLIENT_STATE_METHOD</param-name>
    <param-value>token</param-value>
  </context-param>
<!-- When token client-side state saving is enabled, MyFaces Trinidad can apply an additional
     optimization by caching an entire UIViewRoot tree with each token. 
     (Note that this does not affect thread safety or session failover.) 
     This is a major optimization for AJAX-intensive systems, as postbacks can be processed 
     far more rapidly without the need to reinstantiate the UIViewRoot tree. 
     
     You set the org.apache.myfaces.trinidad.CACHE_VIEW_ROOT parameter to true to enable caching. 
     True is the default. Set the parameter to false to disable caching.
     
     Note: This type of caching is known to interfere with some other JSF technologies. 
     In particular, the Apache MyFaces Tomahawk saveState component does not work, 
     and template text in Facelets may appear in duplicate.
  -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.CACHE_VIEW_ROOT</param-name>
    <param-value>true</param-value>
  </context-param>
  

  <!-- Temporarily disable partial state saving default until we make it work with Trinidad -->
  <context-param>
    <param-name>javax.faces.PARTIAL_STATE_SAVING</param-name>
    <param-value>false</param-value>
  </context-param>

  <!-- Facelets configuration, comment to use JSP -->

  <context-param>
    <param-name>javax.faces.FACELETS_VIEW_MAPPINGS</param-name>
    <!-- to run facelets for jspx files comment the line above and uncomment line below-->
    <param-value>*.xhtml</param-value>
  </context-param>

  <context-param>
    <param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
    <param-value>true</param-value>
  </context-param>

  <context-param>
    <param-name>org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION</param-name>
    <param-value>false</param-value>
  </context-param>

  <context-param>
    <param-name>org.apache.myfaces.trinidad.resource.DEBUG</param-name>
    <param-value>false</param-value>
  </context-param>
  <context-param>
    <param-name>org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT</param-name>
    <param-value>true</param-value>
  </context-param>


  <!-- End of facelets configuration -->

  <!-- Enables Change Persistence at a session scope.  By default,
       Change Persistence is entirely disabled. The ChangeManager is
       an API, which can persist component modifications (like,
       is a showDetail or tree expanded or collapsed). For providing
       a custom Change Persistence implementation inherit from the 
       Trinidad API's ChangeManager class. As the value you have 
       to use the fullqualified class name. -->
  <context-param>
    <param-name>org.apache.myfaces.trinidad.CHANGE_PERSISTENCE</param-name>
    <param-value>session</param-value>
    <!-- to run without using the change manager comment the line above and uncomment the line below-->
    <!--param-value>org.apache.myfaces.trinidad.change.NullChangeManager</param-value-->    
  </context-param>


  <filter-mapping>
    <filter-name>trinidad</filter-name>
    <servlet-name>faces</servlet-name>
  </filter-mapping>


  <!-- Faces Servlet -->
  <servlet>
    <servlet-name>faces</servlet-name>
    <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
  </servlet>
  

 <servlet>
  <servlet-name>resources</servlet-name>
  <servlet-class>org.apache.myfaces.trinidad.webapp.ResourceServlet</servlet-class>
 </servlet>



  <!-- Faces Servlet Mappings -->
  <servlet-mapping>
    <servlet-name>faces</servlet-name>
    <url-pattern>/faces/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>faces</servlet-name>
    <url-pattern>*.faces</url-pattern>
  </servlet-mapping>
    
  <servlet-mapping>
    <servlet-name>resources</servlet-name>
    <url-pattern>/adf/*</url-pattern>
  </servlet-mapping>



    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <welcome-file>index.htm</welcome-file>
        <welcome-file>index.jsp</welcome-file>
        <welcome-file>default.html</welcome-file>
        <welcome-file>default.htm</welcome-file>
        <welcome-file>default.jsp</welcome-file>
    </welcome-file-list>

    

</web-app>